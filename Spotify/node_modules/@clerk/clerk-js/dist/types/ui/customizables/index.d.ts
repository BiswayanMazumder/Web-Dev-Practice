/// <reference types="react" />
import * as Primitives from '../primitives';
export * from './Flow';
export { AppearanceProvider, useAppearance } from './AppearanceContext';
export { descriptors } from './elementDescriptors';
export { localizationKeys, useLocalizations } from '../localization';
export type { LocalizationKey } from '../localization';
export { generateFlowPartClassname } from './classGeneration';
export declare const Box: import("react").FunctionComponent<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {}, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Flex: import("react").FunctionComponent<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
    justify?: "end" | "center" | "start" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
    center?: boolean | undefined;
}, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Col: import("react").FunctionComponent<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
    justify?: "end" | "center" | "start" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
    center?: boolean | undefined;
}, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Grid: import("react").FunctionComponent<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
    justify?: "end" | "center" | "start" | "stretch" | "between" | "around" | undefined;
    columns?: 1 | 2 | 3 | 4 | 6 | undefined;
    gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
}, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Button: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLButtonElement> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    isLoading?: boolean | undefined;
    loadingText?: string | undefined;
    isDisabled?: boolean | undefined;
    isActive?: boolean | undefined;
    hoverAsFocus?: boolean | undefined;
    hasArrow?: boolean | undefined;
} & {
    textVariant?: "body" | "caption" | "h1" | "h2" | "h3" | "subtitle" | "buttonLarge" | "buttonSmall" | undefined;
    size?: "sm" | "md" | "xs" | "iconLg" | undefined;
    colorScheme?: "primary" | "danger" | "neutral" | undefined;
    variant?: "link" | "solid" | "outline" | "ghost" | "linkDanger" | "unstyled" | "roundWrapper" | undefined;
    block?: boolean | undefined;
    focusRing?: boolean | undefined;
}, "ref"> & import("react").RefAttributes<HTMLButtonElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const SimpleButton: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLButtonElement> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    isLoading?: boolean | undefined;
    loadingText?: string | undefined;
    isDisabled?: boolean | undefined;
    isActive?: boolean | undefined;
    hoverAsFocus?: boolean | undefined;
    hasArrow?: boolean | undefined;
} & {
    textVariant?: "body" | "caption" | "h1" | "h2" | "h3" | "subtitle" | "buttonLarge" | "buttonSmall" | undefined;
    size?: "sm" | "md" | "xs" | "iconLg" | undefined;
    colorScheme?: "primary" | "danger" | "neutral" | undefined;
    variant?: "link" | "solid" | "outline" | "ghost" | "linkDanger" | "unstyled" | "roundWrapper" | undefined;
    block?: boolean | undefined;
    focusRing?: boolean | undefined;
}, "ref"> & import("react").RefAttributes<HTMLButtonElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Heading: import("react").FunctionComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    textVariant?: "body" | "caption" | "h1" | "h2" | "h3" | "subtitle" | "buttonLarge" | "buttonSmall" | undefined;
} & {
    as?: "h1" | undefined;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Link: import("react").FunctionComponent<import("react").ClassAttributes<HTMLAnchorElement> & import("react").AnchorHTMLAttributes<HTMLAnchorElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    isExternal?: boolean | undefined;
    isDisabled?: boolean | undefined;
} & {
    variant?: "body" | "caption" | "h1" | "h2" | "h3" | "subtitle" | "buttonLarge" | "buttonSmall" | undefined;
    colorScheme?: "primary" | "inherit" | "danger" | "neutral" | undefined;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Text: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLParagraphElement> & import("react").HTMLAttributes<HTMLParagraphElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    isDisabled?: boolean | undefined;
} & {
    variant?: "body" | "caption" | "h1" | "h2" | "h3" | "subtitle" | "buttonLarge" | "buttonSmall" | undefined;
    colorScheme?: "body" | "inherit" | "danger" | "warning" | "success" | "onPrimaryBg" | "secondary" | undefined;
    truncate?: boolean | undefined;
} & {
    as?: "code" | "label" | "a" | "p" | "div" | "li" | "span" | undefined;
}, "ref"> & import("react").RefAttributes<HTMLElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Image: import("react").FunctionComponent<Omit<Primitives.ImageProps, "ref"> & import("react").RefAttributes<HTMLImageElement> & {
    size?: number | undefined;
    xDescriptors?: number[] | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Alert: import("react").FunctionComponent<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
    justify?: "end" | "center" | "start" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
    center?: boolean | undefined;
} & {
    colorScheme?: "danger" | "warning" | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const AlertIcon: import("react").FunctionComponent<{
    variant: "danger" | "warning";
} & {
    colorScheme?: "primary" | "danger" | "warning" | "success" | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Input: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLInputElement> & import("react").InputHTMLAttributes<HTMLInputElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    variant?: "default" | "unstyled" | undefined;
} & {
    isDisabled?: boolean | undefined;
    hasError?: boolean | undefined;
    focusRing?: boolean | undefined;
    isSuccessful?: boolean | undefined;
} & Partial<Record<"isRequired", boolean>>, "ref"> & import("react").RefAttributes<HTMLInputElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const CheckboxInput: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLInputElement> & import("react").InputHTMLAttributes<HTMLInputElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    variant?: "default" | "unstyled" | undefined;
} & {
    isDisabled?: boolean | undefined;
    hasError?: boolean | undefined;
    focusRing?: boolean | undefined;
    isSuccessful?: boolean | undefined;
} & Partial<Record<"isRequired", boolean>>, "ref"> & import("react").RefAttributes<HTMLInputElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const RadioInput: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLInputElement> & import("react").InputHTMLAttributes<HTMLInputElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    variant?: "default" | "unstyled" | undefined;
} & {
    isDisabled?: boolean | undefined;
    hasError?: boolean | undefined;
    focusRing?: boolean | undefined;
    isSuccessful?: boolean | undefined;
} & Partial<Record<"isRequired", boolean>>, "ref"> & import("react").RefAttributes<HTMLInputElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const FormLabel: import("react").FunctionComponent<import("react").ClassAttributes<HTMLLabelElement> & import("react").LabelHTMLAttributes<HTMLLabelElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {} & Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & {
    children?: import("react").ReactNode;
} & Partial<Record<"isRequired", boolean>> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const FormErrorText: import("react").FunctionComponent<{} & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const FormSuccessText: import("react").FunctionComponent<{} & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const FormWarningText: import("react").FunctionComponent<{} & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const FormInfoText: import("react").FunctionComponent<{} & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Form: import("react").FunctionComponent<Omit<Primitives.FormProps, "ref"> & import("react").RefAttributes<HTMLFormElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Icon: import("react").FunctionComponent<{
    size?: "sm" | "md" | "lg" | "xs" | undefined;
    colorScheme?: "danger" | "warning" | "success" | "neutral" | undefined;
} & {
    icon: import("react").ComponentType<{}>;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Spinner: import("react").FunctionComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & {
    colorScheme?: "primary" | "neutral" | undefined;
    thickness?: "sm" | "md" | undefined;
    size?: "sm" | "md" | "lg" | "xl" | "xs" | undefined;
    speed?: "normal" | "slow" | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Badge: import("react").FunctionComponent<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
    justify?: "end" | "center" | "start" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
    center?: boolean | undefined;
}, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
    textVariant?: "body" | "caption" | "h1" | "h2" | "h3" | "subtitle" | "buttonLarge" | "buttonSmall" | undefined;
    colorScheme?: "primary" | "danger" | "warning" | "success" | undefined;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const NotificationBadge: import("react").FunctionComponent<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {} & {
    direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
    align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
    justify?: "end" | "center" | "start" | "between" | undefined;
    wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
    gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
    center?: boolean | undefined;
}, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
    textVariant?: "body" | "caption" | "h1" | "h2" | "h3" | "subtitle" | "buttonLarge" | "buttonSmall" | undefined;
    colorScheme?: "primary" | "outline" | undefined;
} & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Table: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLTableElement> & import("react").TableHTMLAttributes<HTMLTableElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {}, "as"> & {}, "ref"> & import("react").RefAttributes<HTMLTableCellElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Thead: import("react").FunctionComponent<Omit<Primitives.TheadProps, "ref"> & import("react").RefAttributes<HTMLTableSectionElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Tbody: import("react").FunctionComponent<Omit<Primitives.TbodyProps, "ref"> & import("react").RefAttributes<HTMLTableSectionElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Tr: import("react").FunctionComponent<Omit<Primitives.TrProps, "ref"> & import("react").RefAttributes<HTMLTableCellElement> & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Th: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLTableHeaderCellElement> & import("react").ThHTMLAttributes<HTMLTableHeaderCellElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {}, "as"> & {}, "ref"> & import("react").RefAttributes<HTMLTableCellElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
export declare const Td: import("react").FunctionComponent<Omit<import("react").ClassAttributes<HTMLTableDataCellElement> & import("react").TdHTMLAttributes<HTMLTableDataCellElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
    css?: import("../styledSystem/types").ThemableCssProp;
} & import("../styledSystem").AsProp & {}, "as"> & {}, "ref"> & import("react").RefAttributes<HTMLTableCellElement> & {
    localizationKey?: string | import("../localization").LocalizationKey | undefined;
} & {
    elementDescriptor?: import("./elementDescriptors").ElementDescriptor | (import("./elementDescriptors").ElementDescriptor | undefined)[] | undefined;
    elementId?: import("./elementDescriptors").ElementId | undefined;
    css?: undefined;
    sx?: import("../styledSystem/types").ThemableCssProp;
}>;
