/// <reference types="react" />
export declare const Card: {
    Root: import("react").ForwardRefExoticComponent<Omit<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        css?: import("../../styledSystem/types").ThemableCssProp;
    } & import("../../styledSystem").AsProp & {} & {
        direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
        align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
        justify?: "end" | "center" | "start" | "between" | undefined;
        wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
        gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
        center?: boolean | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
        elementDescriptor?: import("../../customizables/elementDescriptors").ElementDescriptor | (import("../../customizables/elementDescriptors").ElementDescriptor | undefined)[] | undefined;
        elementId?: import("../../customizables/elementDescriptors").ElementId | undefined;
        css?: undefined;
        sx?: import("../../styledSystem/types").ThemableCssProp;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
    Content: import("react").ForwardRefExoticComponent<Omit<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        css?: import("../../styledSystem/types").ThemableCssProp;
    } & import("../../styledSystem").AsProp & {} & {
        direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
        align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
        justify?: "end" | "center" | "start" | "between" | undefined;
        wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
        gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
        center?: boolean | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
        elementDescriptor?: import("../../customizables/elementDescriptors").ElementDescriptor | (import("../../customizables/elementDescriptors").ElementDescriptor | undefined)[] | undefined;
        elementId?: import("../../customizables/elementDescriptors").ElementId | undefined;
        css?: undefined;
        sx?: import("../../styledSystem/types").ThemableCssProp;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
    Footer: import("react").ForwardRefExoticComponent<Omit<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        css?: import("../../styledSystem/types").ThemableCssProp;
    } & import("../../styledSystem").AsProp & {} & {
        direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
        align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
        justify?: "end" | "center" | "start" | "between" | undefined;
        wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
        gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
        center?: boolean | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
        elementDescriptor?: import("../../customizables/elementDescriptors").ElementDescriptor | (import("../../customizables/elementDescriptors").ElementDescriptor | undefined)[] | undefined;
        elementId?: import("../../customizables/elementDescriptors").ElementId | undefined;
        css?: undefined;
        sx?: import("../../styledSystem/types").ThemableCssProp;
    } & {
        isProfileFooter?: boolean | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
    Alert: import("react").MemoExoticComponent<(props: Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        css?: import("../../styledSystem/types").ThemableCssProp;
    } & import("../../styledSystem").AsProp & {} & {
        direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
        align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
        justify?: "end" | "center" | "start" | "between" | undefined;
        wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
        gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
        center?: boolean | undefined;
    } & {
        colorScheme?: "danger" | "warning" | undefined;
    } & {
        elementDescriptor?: import("../../customizables/elementDescriptors").ElementDescriptor | (import("../../customizables/elementDescriptors").ElementDescriptor | undefined)[] | undefined;
        elementId?: import("../../customizables/elementDescriptors").ElementId | undefined;
        css?: undefined;
        sx?: import("../../styledSystem/types").ThemableCssProp;
    }, keyof {
        variant?: "danger" | "warning" | undefined;
        title?: string | import("../../localization").LocalizationKey | undefined;
        subtitle?: string | import("../../localization").LocalizationKey | undefined;
    }> & {
        variant?: "danger" | "warning" | undefined;
        title?: string | import("../../localization").LocalizationKey | undefined;
        subtitle?: string | import("../../localization").LocalizationKey | undefined;
    }) => import("@emotion/react/jsx-runtime").JSX.Element>;
    Action: (props: Omit<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        css?: import("../../styledSystem/types").ThemableCssProp;
    } & import("../../styledSystem").AsProp & {} & {
        direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
        align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
        justify?: "end" | "center" | "start" | "between" | undefined;
        wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
        gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
        center?: boolean | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
        elementDescriptor?: import("../../customizables/elementDescriptors").ElementDescriptor | (import("../../customizables/elementDescriptors").ElementDescriptor | undefined)[] | undefined;
        elementId?: import("../../customizables/elementDescriptors").ElementId | undefined;
        css?: undefined;
        sx?: import("../../styledSystem/types").ThemableCssProp;
    }, "elementId"> & {
        elementId?: import("@clerk/types").CardActionId | undefined;
    }) => JSX.Element;
    ActionLink: (props: import("react").ClassAttributes<HTMLAnchorElement> & import("react").AnchorHTMLAttributes<HTMLAnchorElement> & {
        css?: import("../../styledSystem/types").ThemableCssProp;
    } & {
        isExternal?: boolean | undefined;
        isDisabled?: boolean | undefined;
    } & {
        variant?: "body" | "caption" | "h1" | "h2" | "h3" | "subtitle" | "buttonLarge" | "buttonSmall" | undefined;
        colorScheme?: "primary" | "inherit" | "danger" | "neutral" | undefined;
    } & {
        localizationKey?: string | import("../../localization").LocalizationKey | undefined;
    } & {
        elementDescriptor?: import("../../customizables/elementDescriptors").ElementDescriptor | (import("../../customizables/elementDescriptors").ElementDescriptor | undefined)[] | undefined;
        elementId?: import("../../customizables/elementDescriptors").ElementId | undefined;
        css?: undefined;
        sx?: import("../../styledSystem/types").ThemableCssProp;
    } & {
        to?: string | undefined;
    }) => JSX.Element;
    ActionText: (props: any) => JSX.Element;
    FooterLinks: import("react").MemoExoticComponent<() => JSX.Element | null>;
    ClerkAndPagesTag: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<Omit<Omit<Partial<Record<"isDisabled" | "hasError" | "isLoading" | "isOpen" | "isActive", any>> & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        css?: import("../../styledSystem/types").ThemableCssProp;
    } & import("../../styledSystem").AsProp & {} & {
        direction?: "col" | "row" | "rowReverse" | "columnReverse" | undefined;
        align?: "end" | "center" | "start" | "baseline" | "stretch" | undefined;
        justify?: "end" | "center" | "start" | "between" | undefined;
        wrap?: "wrap" | "noWrap" | "wrapReverse" | undefined;
        gap?: 1 | 2 | 3 | 4 | 8 | 5 | 6 | 7 | 9 | undefined;
        center?: boolean | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement> & {
        elementDescriptor?: import("../../customizables/elementDescriptors").ElementDescriptor | (import("../../customizables/elementDescriptors").ElementDescriptor | undefined)[] | undefined;
        elementId?: import("../../customizables/elementDescriptors").ElementId | undefined;
        css?: undefined;
        sx?: import("../../styledSystem/types").ThemableCssProp;
    } & {
        withFooterPages?: boolean | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement>>>;
};
